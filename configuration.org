#+TITLE: Emacs configuration

* Basic configuration

Reduce the frequency of garbage collection by making it happen on each 50MB of allocated data (the default is on every 0.76MB)
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 50000000)
#+END_SRC

Warn when opening files bigger than 100MB
#+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold 100000000)
#+END_SRC

Stop warnings from GnuTLS library when using HTTPS
#+BEGIN_SRC emacs-lisp
  (setq gnutls-min-prime-bits 4096)
#+END_SRC

Substitute "y" and "n" for "yes" and "no", respectively, when prompting the user for confirmation
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Default to SSH with Tramp because it's faster than the default SCP
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

Default to indenting with spaces, globally
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Use a vertical bar for the cursor instead of the default block
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
#+END_SRC

Sentences end with one space, yo
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

Don't show scroll bars when Emacs is running in windowed mode
#+BEGIN_SRC emacs-lisp
  (when (window-system)
    (tool-bar-mode 0)
    (when (fboundp 'horizontal-scroll-bar-mode)
      (horizontal-scroll-bar-mode -1))
    (scroll-bar-mode -1))
#+END_SRC

When saving a file, if it doesn't end in a newline, automatically add one
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

Improve Emacs' backup behavior. Specifically, this will be more liberal with the creation and storage of temporary backup files
#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t       ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.saves")) ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 6
   version-control t)        ; use versioned backups
  (setq require-final-newline t)
#+END_SRC

Enable visualization of matching parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

Automatically insert matching brackets
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC

Always highlight the current line containing point
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

If winner-mode is available, enable it so we can easily undo changes to visual layout
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

When typing, overwrite selected text
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

Don't show the frim fram on startup
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
#+END_SRC

Move the =kill-region= keybinding and replace it with =backward-kill-word=, with the intent of reducing the need to reach for the dedicated-but-far-off backspace key
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-w" 'backward-kill-word)
  (global-set-key "\C-x\C-k" 'kill-region)
#+END_SRC

Always follow symlinks
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

** Set personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Natalie Pendragon"
        user-mail-address "natalie.pendragon@gmail.com"
        calendar-latitude 40.7
        calendar-longitude -73.9
        calendar-location-name "New York, NY")
#+END_SRC
** Dired

These are the switches that get passed to ls when dired gets a list of files. We’re using:

- l: Use the long listing format.
- h: Use human-readable sizes.
- v: Sort numbers naturally.
- A: Almost all. Doesn’t include ”.” or ”..”.
#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-lhvA")
#+END_SRC

When deleting things in Dired, clean up their associated buffers
#+BEGIN_SRC emacs-lisp
  (setq dired-clean-up-buffers-too t)
#+END_SRC

Always copy directories recursively instead of asking every time
#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always)
#+END_SRC

Ask before recursively deleting a directory, though
#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-deletes 'top)
#+END_SRC

** Mail
*** Mutt

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("/mutt" . mail-mode))
#+END_SRC
** IRC

#+BEGIN_SRC emacs-lisp
  (setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC
** Misc functions

#+BEGIN_SRC emacs-lisp
  (defun delete-current-line ()
    "Delete (not kill) the current line."
    (interactive)
    (save-excursion
      (delete-region
       (progn (forward-visible-line 0) (point))
       (progn (forward-visible-line 1) (point)))))
  (global-set-key (kbd "C-c DEL") 'delete-current-line)

  (defun prelude-toggle-fold ()
    "Toggle fold all lines larger than indentation on current line"
    (interactive)
    (let ((col 1))
      (save-excursion
        (back-to-indentation)
        (setq col (+ 1 (current-column)))
        (set-selective-display
         (if selective-display nil (or col 1))))))
  (global-set-key [(M C i)] 'prelude-toggle-fold)
#+END_SRC

* Package Management

Where possible, the rest of this configuration is based on =use-package=; this configuration block will set up package repositories and ensure =use-package= is ready to go
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (require 'package)

  (setq package-archives '(("org" . "http://orgmode.org/elpa/")
                           ("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")
                           ("melpa-stable" . "http://stable.melpa.org/packages/")
                           ("marmalade" . "http://marmalade-repo.org/packages/")))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (use-package use-package-ensure-system-package
    :ensure t)
#+END_SRC
** Utility
*** dumb-jump

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :init (dumb-jump-mode)
    :bind (("C-c ." . dumb-jump-go)
           ("C-c M-." . dumb-jump-quick-look)
           ("C-c ," . dumb-jump-back)))
#+END_SRC

*** engine-mode

#+BEGIN_SRC emacs-lisp
  (use-package engine-mode
    :ensure t
    :init
    (progn
      (setq engine/keybinding-prefix "C-c /")
      (setq engine/browser-function 'browse-url-chrome))
    :config
    (defengine duckduckgo
      "https://duckduckgo.com/?q=%s"
      :keybinding "d")
    (defengine github-natpen
      "https://github.com/search?utf8=✓&q=%s user:natpen&type=Code&ref=simplesearch"
      :keybinding "n"
      :docstring "Search natpen's code on Github")
    (defengine google
      "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
      :keybinding "g")
    (defengine stack-overflow
      "https://stackoverflow.com/search?q=%s"
      :keybinding "s")
    (engine-mode t))
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (progn
      (setq flycheck-display-errors-function nil)
      (add-hook 'after-init-hook 'global-flycheck-mode)))
#+END_SRC
*** drag-stuff

#+BEGIN_SRC emacs-lisp
  (use-package drag-stuff
    :ensure t
    :diminish drag-stuff-mode
    :init (progn
            (setq drag-stuff-modifier '(meta shift))
            (drag-stuff-global-mode 1)))
#+END_SRC
*** multiple-cursors

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-S-c C-e" . mc/edit-lines)
           ("C-S-c C-<" . mc/mark-all-like-this)
           ("C-S-c C-<" . mc/mark-all-like-this-dwim)))
#+END_SRC
*** linum-relative

#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config (progn
              (load "~/.emacs.d/linum-off.el")
              (global-linum-mode t)
              (setq linum-format "%3d\u2502")))
#+END_SRC
*** ido

#+BEGIN_SRC emacs-lisp
  (use-package ido
    :ensure t
    :diminish ido-mode
    :init
    (progn (ido-mode 1)
           (use-package ido-vertical-mode
             :ensure t
             :init (ido-vertical-mode 1)))
    :config
    (progn (use-package flx-ido
             :ensure t
             :init (flx-ido-mode 1)
             :config (setq ido-use-faces nil))
           (setq ido-everywhere t)
           (setq ido-enable-flex-matching t)
           (setq ido-create-new-buffer 'always)
           (setq ido-ignore-extensions t)
           (setq ido-vertical-show-count t)
           (setq ido-vertical-define-keys 'C-n-and-C-p-only)
           (add-to-list 'ido-ignore-files "\\.DS_Store")))
#+END_SRC
*** which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (setq which-key-replacement-alist
          '(((nil . "Prefix Command") . (nil . "prefix"))
            ((nil . "\\`\\?\\?\\'") nil . "lambda")
            ((nil . "which-key-show-next-page-no-cycle") nil . "wk next pg")
            (("<\\([[:alnum:]-]+\\)>") "\\1")
            (("left") "◀")
            (("right") "▶")
            (("up") "▲")
            (("down") "▼")
            (("delete") "DEL")
            (("next") "PgDn")
            (("prior") "PgUp")
            ((nil . "\\`cargo-process-") . (nil . "ℂ/"))
            ((nil . "\\`flycheck-") . (nil . "𝓕𝓒/"))
            ((nil . "\\`ledger-") . (nil . "𝓛/"))
            ((nil . "\\`projectile-") . (nil . "𝓟/"))
            ((nil . "\\`persp-") . (nil . "ℙ/"))))
    (which-key-mode t))
#+END_SRC
*** projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :init (projectile-global-mode t)
    :config
    (progn
      (setq projectile-keymap-prefix (kbd "C-c p"))
      (setq projectile-enable-caching t)
      (setq projectile-require-project-root nil)
      (setq projectile-completion-system 'ido)
      (setq projectile-switch-project-action 'magit-status)
      (add-to-list 'projectile-globally-ignored-files ".DS_Store")
      (add-to-list 'projectile-globally-ignored-files "node_modules"))
    :bind ("C-c v" . projectile-ag))
#+END_SRC
*** perspective

#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :ensure t
    :bind ("C-x x x" . persp-switch-last)
    :init (persp-mode +1)

    (use-package persp-projectile
      :ensure t
      :bind ("C-x x P" . projectile-persp-switch-project))

    :config
      (setq persp-interactive-completion-function #'ido-completing-read)
      (persp-turn-off-modestring))
#+END_SRC
*** smex

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+END_SRC
*** auto-complete

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (require 'auto-complete-config)
      (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
      (ac-config-default)))
#+END_SRC
*** writegood

#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
    :ensure t
    :bind (("C-c g" . writegood-mode)
           :map writegood-mode-map
           ("C-c C-g g" . writegood-grade-level)
           ("C-c C-g e" . writegood-reading-ease)))
#+END_SRC
*** yasnippet

#+BEGIN_SRC emacs-lisp
  ;; Clone the following repo from ~/code/
  ;; https://github.com/AndreaCrotti/yasnippet-snippets

  (use-package yasnippet
    :ensure t
    :init
    (if (boundp 'yas-snippet-dirs)
        (add-to-list 'yas-snippet-dirs "~/code/yasnippet-snippets")
      (setq yas-snippet-dirs (list "~/code/yasnippet-snippets"))))
#+END_SRC
*** graphviz-dot-mode

#+BEGIN_SRC emacs-lisp
  (defun graphviz-dot-compile-and-preview ()
    "Compile and preview the graph"
    (interactive)
    (progn
      (save-buffer)
      (compile compile-command)
      (sleep-for 0 100)
      (graphviz-dot-preview)))

  (use-package graphviz-dot-mode
    :ensure t
    :bind
    (:map graphviz-dot-mode-map
          ("C-c g" . graphviz-dot-compile-and-preview)))
#+END_SRC
*** org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (setq org-ellipsis "⤵")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
#+END_SRC

**** Task tracking

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-index-file (org-file-path "index.org"))
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))

  (setq org-agenda-files (list org-index-file))

  (defun mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key global-map "\C-c\C-x\C-s" 'mark-done-and-archive)

  (setq org-tag-alist '((:startgroup . nil)
                        ("work" . ?w) ("personal" . ?p)
                        (:endgroup . nil)))

  (setq org-todo-keywords
    '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
  (setq org-log-done 'time)
#+END_SRC

**** Task templates

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("b" "Blog idea"
           entry
           (file (org-file-path "blog-ideas.org"))
           "* TODO %?\n")

          ("g" "Groceries"
           checkitem
           (file (org-file-path "groceries.org")))

          ("l" "Today I Learned..."
           entry
           (file+datetree (org-file-path "til.org"))
           "* %?\n")

          ("r" "Reading"
           checkitem
           (file (org-file-path "to-read.org")))

          ("t" "Todo"
           entry
           (file org-index-file)
           "* TODO %?\n")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)

  (defun open-index-file ()
    "Open the master org TODO list."
    (interactive)
    (find-file org-index-file)
    (flycheck-mode -1)
    (end-of-buffer))

  (global-set-key (kbd "C-c i") 'open-index-file)

  (defun org-capture-todo ()
    (interactive)
    (org-capture :keys "t"))

  (global-set-key (kbd "M-n") 'org-capture-todo)
  (add-hook 'gfm-mode-hook
            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
  (add-hook 'haskell-mode-hook
            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
#+END_SRC

**** Exporting

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

*** Misc packages

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish ""
    :config
    (beacon-mode 1))

  ;; (global-set-key (kbd "C-c r") 'remember)
  ;; (add-hook 'remember-mode-hook 'org-remember-apply-template)
  ;; (setq org-remember-templates
  ;;       '((?n "* %U %?\n\n  %i\n  %a" "~/notes.org")))
  ;; (setq remember-annotation-functions '(org-remember-annotation))
  ;; (setq remember-handler-functions '(org-remember-handler))

  (use-package ledger-mode
    :ensure t
    :mode "\\.ledger$")

  (use-package ag
    :ensure t
    :defer t)
  (use-package diminish
    :ensure t
    :defer t)
  (use-package dumb-jump
    :ensure t
    :defer t)
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
  (use-package ggtags
    :ensure t
    :defer t)
  (use-package highlight-symbol
    :ensure t
    :defer t)
  (use-package markdown-mode
    :ensure t
    :defer t)
  (use-package restclient
    :ensure t
    :defer t)
  (use-package smartparens
    :ensure t)
  (use-package yaml-mode
    :ensure t)
  (use-package toml-mode
    :ensure t)
  (use-package planet-theme
    :ensure t
    :init (add-hook 'after-init-hook (load-theme 'planet t)))
  (use-package highlight-indentation
    :ensure t
    :defer t)
#+END_SRC

*** Eshell

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :bind ("M-e" . eshell)
    :init
    (add-hook 'eshell-first-time-mode-hook
              (lambda ()
                (add-to-list 'eshell-visual-commands "htop")))
    :config
    (progn
      (setq eshell-history-size 5000)
      (setq eshell-save-history-on-exit t)))
#+END_SRC
*** imenu

#+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :ensure t
    :bind ("C-'" . imenu-list-smart-toggle)
    :init
    (progn
      (setq imenu-list-focus-after-activation t)
      (setq imenu-list-auto-resize t)))

  (use-package imenu-anywhere
    :ensure t
    :bind ("C-." . imenu-anywhere))
#+END_SRC
** Git
One of my favorite parts of getting comfortable with Emacs has been the tight integration one is able to create between development workflows and version control workflows. Simply switching from the good ol' shell-based Git porcelain to [[https://github.com/magit/magit][Magit]] was a bit of a profound experience for me. I've recently added [[https://github.com/syohex/emacs-git-messenger][git-messenger]] and [[https://github.com/pidu/git-timemachine][git-timemachine]] which add a few nice ways of interacting with version control from source code buffers themselves.
*** git-messenger
Curious what the last commit was to modify a certain piece of code? This will give you a quick popup with the commit message of said commit. See hints in the echo area for further actions, like viewing the entire commit in another buffer.
#+BEGIN_SRC emacs-lisp
  (use-package git-messenger
    :ensure t
    :bind
    ("C-x v p" . git-messenger:popup-message))
#+END_SRC
*** git-timemachine
This is handy for comparing successive revisions of a given file you're interacting with, as well as just quickly checking for the last time it was modified in source control.
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    :bind
    (("C-x v t" . git-timemachine)
     ("C-x v o" . git-timemachine-toggle)))
#+END_SRC
*** magit
The illustrious Emacs-based Git porcelain. There's too much to cover in this README, but there is extensive documentation on it [[https://magit.vc/manual/magit/][elsewhere]]. Highly recommended read.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (use-package ido-completing-read+
      :ensure t)
    :config
    (progn
      (setq magit-completing-read-function 'magit-ido-completing-read)
      (setq magit-branch-arguments nil)
      (global-magit-file-mode)
      (add-hook 'after-save-hook 'magit-after-save-refresh-status))
    :bind
    (("C-x g" . magit-status)
     ("C-x M-g" . magit-dispatch-popup)
     ("C-x v l" . magit-log-buffer-file)))
#+END_SRC
* Development Environments
** Go
The Go development environment relies on [[https://github.com/dominikh/go-mode.el][go-mode]], go-autocomplete, and [[https://github.com/syohex/emacs-go-eldoc][go-eldoc]]. Flycheck has built-in support for Go, so that works without any additional packages.

- _go-mode_: this package also integrates with [[https://github.com/rogpeppe/godef][godef]], so that's a (highly recommended) dependency if you want it.
- _go-autocomplete_: this package relies on [[https://github.com/nsf/gocode][gocode]]. You can skip the Emacs-specific steps they provide.

#+BEGIN_SRC emacs-lisp
  (use-package go-eldoc
    :ensure t
    :ensure-system-package (gocode . "go get -u github.com/nsf/gocode")
    :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package go-autocomplete
    :ensure t
    :ensure-system-package (gocode . "go get -u github.com/nsf/gocode"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :ensure-system-package (godef . "go get -u github.com/rogpeppe/godef")
    :init
    (progn
      (defun go-set-tab-width ()
        "Set the tab width."
        (setq-local tab-width 2))
      (add-hook 'go-mode-hook 'go-set-tab-width)
      (add-hook 'go-mode-hook (lambda()
                                (yas-reload-all)
                                (yas-minor-mode))))
    :config
    (progn
      (go-eldoc-setup)
      (add-hook 'before-save-hook 'gofmt-before-save))
    :bind
    (:map go-mode-map
          ("C-c f" . gofmt)
          ("C-c C-k" . godoc-at-point)
          ("C-c C-r" . go-remove-unused-imports)
          ("C-c C-g" . go-goto-imports)
          ("M-." . godef-jump)))
#+END_SRC

** Javascript
The Javascript development environment relies on [[https://github.com/brettlangdon/jsfmt.el][jsfmt]].

- _jsfmt_: this package relies on [[https://github.com/rdio/jsfmt][jsfmt (the indentically-named global npm package consumed by this Emacs package)]].

#+BEGIN_SRC emacs-lisp
  (use-package jsfmt
    :ensure t
    :ensure-system-package (jsfmt . "npm i -g jsfmt")
    :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ac-js2
    :ensure t
    :defer t
    :config
    (setq ac-js2-evaluate-calls t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package js2-refactor
    :ensure t
    :diminish js2-refactor-mode
    :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode ("\\.js\\'" "\\.json\\'")
    :init
    (add-hook 'js2-mode-hook (lambda()
                               (yas-reload-all)
                               (yas-minor-mode)
                               (js2-refactor-mode)
                               (ac-js2-mode)))
    :config
    (progn
      (setq js2-basic-offset 2)
      (setq js2-highlight-level 3)
      (setq js2-highlight-external-variables nil)
      (setq js2-strict-missing-semi-warning nil)
      ;; (add-hook 'before-save-hook 'jsfmt-before-save)
      (highlight-indentation-mode)
      (rename-modeline "js2-mode" js2-mode "JS2")))
#+END_SRC

** Python
The Python development environment relies on python-mode, [[https://github.com/paetzke/py-yapf.el][py-yapf]], and [[https://github.com/tkf/emacs-jedi][jedi]].

- _py-yapf_: provides strongly-opiniated (but customizable) code formatting, similar to gofmt. Make sure to `pip install yapf` from your shell for this to work properly. You'll have to call it manually, but if you want it to happen automatically on save, there is a commented out line in the config for accomplishing that. Just uncomment it.
- _jedi_: provides Python autocompletion functionality. For jedi to work, you'll need to install the jedi server which is done in Emacs by running M-x jedi:install-server

#+BEGIN_SRC emacs-lisp
  (use-package pyenv-mode
    :ensure t
    :config
    (defun projectile-pyenv-mode-set ()
      "Set pyenv version matching project name."
      (let ((project (projectile-project-name)))
        (if (member project (pyenv-mode-versions))
            (pyenv-mode-set project)
          (pyenv-mode-unset))))
    (add-hook 'projectile-switch-project-hook 'projectile-pyenv-mode-set)
    (add-hook 'persp-switch-hook              'projectile-pyenv-mode-set)
    (add-hook 'python-mode-hook               'pyenv-mode))

  (use-package pyenv-mode-auto
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package py-yapf
    :ensure t
    :ensure-system-package (yapf . "source ~/.emacs.d/.python-environments/default/bin/activate && pip install yapf")
    :config (py-yapf-enable-on-save))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;(use-package py-yapf
  ;;  :ensure t
  ;;  :ensure-system-package (yapf . "pip install yapf && pip3 install yapf")
  ;;  :config (py-yapf-enable-on-save))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package sphinx-doc
    :ensure t
    :ensure-system-package (sphinx . "source ~/.emacs.d/.python-environments/default/bin/activate && pip install sphinx")
    :init (add-hook 'python-mode-hook (lambda ()
                                        (require 'sphinx-doc)
                                        (sphinx-doc-mode t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :ensure-system-package (jedi . "source ~/.emacs.d/.python-environments/default/bin/activate && pip install jedi")
    :init
    (progn
      (add-hook 'python-mode-hook 'jedi:setup)
      (add-hook 'python-mode-hook 'jedi:ac-setup))
    :config
    (progn
      (jedi:setup)
      (setq jedi:complete-on-dot t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :ensure t
    :ensure-system-package (flake8 . "source ~/.emacs.d/.python-environments/default/bin/activate && pip install flake8")
    :mode ("BUILD" "\\.wsgi$")
    :config (progn
              (eldoc-mode)
              (highlight-indentation-mode)
              (yas-reload-all)
              (yas-minor-mode)
              (setq-default python-indent 4)
              (setq python-fill-docstring-style 'onetwo)

              (when (executable-find "ipython")
                (setq
                 python-shell-interpreter "ipython"
                 python-shell-interpreter-args ""
                 python-shell-prompt-regexp "In \\[[0-9]+\\]: "
                 python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
                 python-shell-completion-setup-code
                 "from IPython.core.completerlib import module_completion"
                 python-shell-completion-module-string-code
                 "';'.join(module_completion('''%s'''))\n"
                 python-shell-completion-string-code
                 "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"))))
#+END_SRC

** Rust
The Rust development environment relies on [[https://github.com/rust-lang/rust-mode][rust-mode]], [[https://github.com/company-mode/company-mode][company]], [[https://github.com/kwrooijen/cargo.el][cargo]], [[https://github.com/racer-rust/emacs-racer][racer]], and [[https://github.com/flycheck/flycheck-rust][flycheck-rust]].

- _company_: this is currently the only place I use company for autocompletion - in most places I use [[https://github.com/auto-complete/auto-complete][auto-complete]], but the Emacs Rust autocomplete integration only seems to play well with company.

#+BEGIN_SRC emacs-lisp
  (use-package cargo
    :ensure t
    :diminish (cargo-minor-mode . "crgo")
    :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish "cmpny"
    :defer t
    :init (setq annotations-company-tooltip-align t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-rust
    :ensure t
    :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package racer
    :ensure t
    :ensure-system-package (racer . "rustup component add rust-src && cargo install racer")
    :diminish (racer-mode . "rcr")
    :defer t
    :init (progn
            (setq racer-rust-src-path (exec-path-from-shell-copy-env "RUST_SRC_PATH"))
            (add-hook 'racer-mode-hook (lambda()
                                         (company-mode)
                                         (eldoc-mode)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :init
    (add-hook 'rust-mode-hook (lambda()
                                (yas-reload-all)
                                (yas-minor-mode)
                                (highlight-indentation-mode)
                                (cargo-minor-mode)
                                (flycheck-rust-setup)
                                (racer-mode)))
    :config (add-hook 'before-save-hook 'rust-format-buffer)
    :bind (:map rust-mode-map
                ("<tab>" . company-indent-or-complete-common)))
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-haskell
    :ensure t
    :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :defer t
    :init
    (lambda()
      (yas-reload-all)
      (yas-minor-mode)))
#+END_SRC

** Scala

#+BEGIN_SRC emacs-lisp
  (use-package ensime
    :ensure t
    :defer t
    :pin melpa-stable)
#+END_SRC

** Groovy

#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :ensure    t
    :defer     t
    :mode      ("\\.\\(groovy\\|gradle\\)$" "Jenkinsfile"))
#+END_SRC
